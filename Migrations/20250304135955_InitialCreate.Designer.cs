// <auto-generated />
using System;
using ECommercePlatform.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommercePlatform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304135955_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommercePlatform.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CartId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = 1,
                            CartId = 1,
                            Price = 100m,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            CartItemId = 2,
                            CartId = 1,
                            Price = 200m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 3,
                            CartId = 2,
                            Price = 100m,
                            ProductId = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTimeOffset(new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTimeOffset(new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            OrderId = 1,
                            Price = 100m,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 2,
                            OrderId = 1,
                            Price = 200m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 3,
                            OrderId = 2,
                            Price = 100m,
                            ProductId = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaceId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Address = "Depo Adresi 1",
                            City = "İstanbul",
                            Country = "Türkiye",
                            Description = "Ana Depo",
                            Name = "Depo 1",
                            PostalCode = "34000",
                            State = "İstanbul"
                        },
                        new
                        {
                            PlaceId = 2,
                            Address = "Mağaza Adresi 1",
                            City = "Ankara",
                            Country = "Türkiye",
                            Description = "Merkez Mağaza",
                            Name = "Mağaza 1",
                            PostalCode = "06000",
                            State = "Ankara"
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ResellerId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int?>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("ResellerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Elektronik",
                            Description = "Ürün 1 Açıklaması",
                            Name = "Ürün 1",
                            Price = 100m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Ev Eşyası",
                            Description = "Ürün 2 Açıklaması",
                            Name = "Ürün 2",
                            Price = 200m,
                            Stock = 30
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("GeneratedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("GeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            Content = "Rapor içeriği burada yer alacak.",
                            GeneratedBy = "Yönetici",
                            GeneratedDate = new DateTimeOffset(new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Satış Raporu"
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Reseller", b =>
                {
                    b.Property<int>("ResellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResellerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ResellerId");

                    b.ToTable("Resellers");

                    b.HasData(
                        new
                        {
                            ResellerId = 1,
                            Address = "Adres 3",
                            City = "İzmir",
                            ContactName = "Ayşe",
                            Country = "Türkiye",
                            Email = "ayse@bayi1.com",
                            Name = "Bayi 1",
                            Phone = "0123456787",
                            PostalCode = "35000",
                            State = "İzmir"
                        },
                        new
                        {
                            ResellerId = 2,
                            Address = "Adres 4",
                            City = "Bursa",
                            ContactName = "Fatma",
                            Country = "Türkiye",
                            Email = "fatma@bayi2.com",
                            Name = "Bayi 2",
                            Phone = "0123456786",
                            PostalCode = "16000",
                            State = "Bursa"
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            VendorId = 1,
                            Address = "Adres 1",
                            City = "İstanbul",
                            ContactName = "Ahmet",
                            Country = "Türkiye",
                            Email = "ahmet@tedarikci1.com",
                            Name = "Tedarikçi 1",
                            Phone = "0123456789",
                            PostalCode = "34000",
                            State = "İstanbul"
                        },
                        new
                        {
                            VendorId = 2,
                            Address = "Adres 2",
                            City = "Ankara",
                            ContactName = "Mehmet",
                            Country = "Türkiye",
                            Email = "mehmet@tedarikci2.com",
                            Name = "Tedarikçi 2",
                            Phone = "0123456788",
                            PostalCode = "06000",
                            State = "Ankara"
                        });
                });

            modelBuilder.Entity("ECommercePlatform.Models.CartItem", b =>
                {
                    b.HasOne("ECommercePlatform.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ECommercePlatform.Models.OrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommercePlatform.Models.Product", b =>
                {
                    b.HasOne("ECommercePlatform.Models.Reseller", null)
                        .WithMany("Products")
                        .HasForeignKey("ResellerId");

                    b.HasOne("ECommercePlatform.Models.Vendor", null)
                        .WithMany("Products")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("ECommercePlatform.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ECommercePlatform.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommercePlatform.Models.Reseller", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Models.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
